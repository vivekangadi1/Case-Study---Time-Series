iris
view(iris)
View(iris)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
install.packages("tidyr")
library(forecast)
tryArma <- function(delta, guessp, guessq, timeseries) {
df <- data.frame()
# generate all possible ARMA models
for (p in max(0,(guessp-delta)):(guessp+delta)) {
for (q in max(0,(guessq-delta)):(guessq+delta)) {
order <- c(p,0,q)
# Fit a maximum likelihood ARMA(p,q) model
armafit <- Arima(timeseries, order=order, method="ML")
# Add the results to the dataframe
df <- rbind(df, c(p, q, armafit$loglik, armafit$aic, armafit$aicc, armafit$bic))
}
}
names(df) <- c("p","q","log.likelihood", "AIC", "AICc", "BIC")
return(df)
}
arma22<-arima.sim(model=list(ar=c(.9,-.2),ma=c(-.7,.1)),n=200)
df <- tryArma(2,1,1,arma22)
df
install.packages("tseries")
install.packages("tseries")
library(tseries)
exch <- read.csv("exchange-rate-twi.csv", stringsAsFactors=FALSE)
setwd("D:/ml/R/timeseries")
exch <- read.csv("exchange-rate-twi.csv", stringsAsFactors=FALSE)
adf.test(exch$Exchange.Rate.TWI, alternative="stationary")
kpss.test(exch$Exchange.Rate.TWI)
noise <- ts(rnorm(200, mean = 0, sd = 1))
plot.ts(noise)
acf(noise, level=95, lag.max=40, main="ACF Plot for White Noise")
pacf(noise, level=95, lag.max=40, main="PACF Plot for White Noise")
library(graphics)
library(forecast)
exchange_rate_data <- read.csv("exchange-rate-twi.csv", header = T, sep = ',')
nrow(exchange_rate_data)
timeser <- ts(exchange_rate_data$Exchange.Rate.TWI)
plot(timeser)
lmfit <- lm(Exchange.Rate.TWI ~ Month, data=exchange_rate_data)
globalpred <- predict(lmfit)
plot(globalpred, col='red', type = "l")
localpred <- timeser - globalpred
plot(localpred, col='red', type = "l")
plot.ts(noise)
acf(noise, level=95, lag.max=40, main="ACF Plot for White Noise")
pacf(noise, level=95, lag.max=40, main="PACF Plot for White Noise")
acf(noise, level=95, lag.max=40, main="ACF Plot for White Noise")
acf(exch, level=95, lag.max=40, main="ACF Plot for White Noise")
pacf(exch, level=95, lag.max=40, main="PACF Plot for White Noise")
arma22<-arima.sim(model=list(ar=c(.9,-.2),ma=c(-.7,.1)),n=200)
df <- tryArma(2,1,1,arma22)
arma22<-arima.sim(model=list(exch),n=200)
df <- tryArma(2,1,1,arma22)
df
acf(exch, level=95, lag.max=40, main="ACF Plot for White Noise")
acf(exch$Exchange.Rate.TWI, level=95, lag.max=40, main="ACF Plot for White Noise")
pacf(exch, level=95, lag.max=40, main="PACF Plot for White Noise")
armapred <- arima.sim(model=list(ar=0.96),n=304)
resi <- localpred - armapred
resi
adf.test(resi, alternative="stationary")
kpss.test(resi)
library(graphics)
library(forecast)
library(tseries)
exchange_rate_data <- read.csv("exchange-rate-twi.csv", header = T, sep = ',')
nrow(exchange_rate_data)
timeser <- ts(exchange_rate_data$Exchange.Rate.TWI)
plot(timeser)
lmfit <- lm(Exchange.Rate.TWI ~ Month, data=exchange_rate_data)
globalpred <- predict(lmfit)
plot(globalpred, col='red', type = "l")
localpred <- timeser - globalpred
plot(localpred, col='red', type = "l")
acf(localpred)
acf(localpred, type="partial")
armapred <- arima.sim(model=list(ar=0.96),n=304)
resi <- localpred - armapred
plot(resi)
kpss.test(resi)
require(graphics)
library(forecast)
exchange_rate_data <- read.csv("exchange-rate-twi.csv", header = T, sep = ',')
nrow(exchange_rate_data)
timeser <- ts(exchange_rate_data$Exchange.Rate.TWI)
plot(timeser)
timevals <- c(1:nrow(exchange_rate_data))
timeseriesdf <- as.data.frame(cbind(timevals, as.vector(timeser)))
colnames(timeseriesdf) <- c('Month', 'Exchange_Rate')
lmfit <- lm(Exchange_Rate ~ Month, data=timeseriesdf)
globalpred <- predict(lmfit, Month=timevals)
lines(timevals, globalpred, col='red', lwd=2)
localpred <- timeser - globalpred
plot(localpred, col='red', type = "l")
acf(localpred)
acf(localpred, type="partial")
armafit <- auto.arima(localpred)
acf(localpred)
acf(localpred, type="partial")
armafit <- auto.arima(localpred)
tsdiag(armafit)
armafit
armapred <- fitted(armafit)
class_dec_pred <- ts(globalpred)
plot(timeser, col = "black")
lines(class_dec_pred, col = "red")
resi <- localpred - armapred
plot(resi)
library(tseries)
adf.test(resi,alternative = "stationary")
kpss.test(resi)
filename <- c("exchange-rate.csv")
cols <- c("red", "blue")
labels <- c("Raw", "Smoothed")
ylab1 <- c("Exchange Rate TWI")
xlab1 <- c("Months from May 1970")
title <- c("Exchange Rate TWI: May 1970 to Aug 1995")
width <- 51
rawdata <- read.csv(filename)
timeser <- ts(rawdata[,2])
plot(timeser, main=title, xlab = xlab1,
ylab = ylab1, col=cols[1])
smoothedseries <- filter(timeser, filter=rep(1/width, width),
method="convolution", sides=2)
lines(smoothedseries, col=cols[2], lwd=2)
legend("bottomleft", labels, col=cols, lwd=2)
plot(timeser, main=title, xlab = xlab1, ylab = ylab1)
cols <- c("red", "blue", "green", "black")
alphas <- c(0.02, 0.1, 0.8)
labels <- c(paste("alpha =", alphas), "Original")
for (i in seq(1,length(alphas))) {
smoothedseries <- HoltWinters(timeser, alpha=alphas[i],
beta=FALSE, gamma=FALSE)
lines(fitted(smoothedseries)[,1], col=cols[i], lwd=2)
}
legend("bottomleft", labels, col=cols, lwd=2)
library(graphics)
library(forecast)
bitcoin_price_data <- read.csv("bitcoin_price_historical_data.csv", header = T, sep = ',')
nrow(bitcoin_price_data)
indata <- bitcoin_price_data$Price[1:28]
timeser <- ts(indata)
plot(timeser)
autoarimafit<- auto.arima(timeser)
in_data_pred<-fitted(autoarimafit)
plot(autoarimafit$x, col="black")
lines(in_data_pred, col="red")
fcast_auto_arima <- predict(autoarimafit, n.ahead = 4)
outdata <- bitcoin_price_data$Price[29:32]
MAPE_auto_arima <- accuracy(fcast_auto_arima$pred,outdata)[5]
MAPE_auto_arima
out_data_pred <- ts(fcast_auto_arima$pred)
total_timeser <- ts(bitcoin_price_data$Price)
plot(total_timeser, col = "black", lwd = 2)
lines(c(in_data_pred, out_data_pred), col = "blue", lwd = 2)
lines(in_data_pred, col="red", lwd = 2)
indata <- bitcoin_price_data$Price[1:29]
timeser <- ts(indata)
plot(timeser)
autoarimafit<- auto.arima(timeser)
in_data_pred<-fitted(autoarimafit)
plot(autoarimafit$x, col="black")
lines(in_data_pred, col="red")
fcast_auto_arima <- predict(autoarimafit, n.ahead = 3)
outdata <- bitcoin_price_data$Price[30:32]
MAPE_auto_arima <- accuracy(fcast_auto_arima$pred,outdata)[5]
MAPE_auto_arima
out_data_pred <- ts(fcast_auto_arima$pred)
total_timeser <- ts(bitcoin_price_data$Price)
plot(total_timeser, col = "black", lwd = 2)
lines(c(in_data_pred, out_data_pred), col = "blue", lwd = 2)
lines(in_data_pred, col="red", lwd = 2)
summary()
summary(autoarimafit)
